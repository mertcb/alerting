/*
 *   Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *   
 *   Licensed under the Apache License, Version 2.0 (the "License").
 *   You may not use this file except in compliance with the License.
 *   A copy of the License is located at
 *   
 *       http://www.apache.org/licenses/LICENSE-2.0
 *   
 *   or in the "license" file accompanying this file. This file is distributed 
 *   on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either 
 *   express or implied. See the License for the specific language governing 
 *   permissions and limitations under the License.
 */

buildscript {
    apply from: 'build-tools/repositories.gradle'

    ext {
        es_version = '7.17.16'
        kotlin_version = '1.9.22'
    }

    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
    }
    dependencies {
        classpath "org.elasticsearch.gradle:build-tools:${es_version}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
    }
}

plugins {
    id 'com.netflix.nebula.ospackage' version "11.0.0" apply false
    id "com.dorongold.task-tree" version "1.5"
    id "com.github.johnrengelman.shadow" version "8.1.1" apply false
}

apply plugin: 'base'

ext {
    opendistroVersion = "${version}"
    isSnapshot = "true" == System.getProperty("build.snapshot", "true")
}

allprojects {
    group = "com.amazon.opendistroforelasticsearch"
    // Increment the final digit when there's a new plugin versions for the same opendistro version
    // Reset the final digit to 0 when upgrading to a new opendistro version
    version = "${opendistroVersion}.0"

    apply from: "$rootDir/build-tools/repositories.gradle"

    plugins.withId('java') {
        sourceCompatibility = targetCompatibility = "11"
    }
    plugins.withId('org.jetbrains.kotlin.jvm') {
        compileKotlin.kotlinOptions.jvmTarget = compileTestKotlin.kotlinOptions.jvmTarget = "11"
    }

    // Force certain dependencies here so they reflect across all sub-projects
    configurations.all {
        if (it.state != Configuration.State.UNRESOLVED) return
        resolutionStrategy {
            force "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.11.4"
            force "com.google.guava:guava:30.0-jre"
            force "com.puppycrawl.tools:checkstyle:8.29"
            force "commons-codec:commons-codec:1.13"
            force "junit:junit:4.13.1"
            force "org.apache.httpcomponents:httpclient:4.5.13"
            force "org.codehaus.plexus:plexus-utils:3.0.24"
        }
    }
}

evaluationDependsOnChildren()

check.dependsOn subprojects*.check

configurations {
    ktlint
}

dependencies {
    ktlint "com.pinterest:ktlint:0.33.0"
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "alerting/**/*.kt", "elastic-api/**/*.kt", "core/**/*.kt"
}

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "alerting/**/*.kt", "elastic-api/**/*.kt", "core/**/*.kt"
}

check.dependsOn ktlint
